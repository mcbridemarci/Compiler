 //definitions
%{
#include <stdio.h>
#include <string.h>
#include "parser.tab.h" // this file will be auto generated by bison
#include "scanType.h"

extern int yylex();
//Count the lines
int line_num = 1;

static RType* rType;

void yyerror(const char *s);

%}

%x

letter          [a-zA-Z]
digit           [0-9]
letdig          {letter}|{digit}
ID              {letter}+{letdig}*
NUMCONST        {digit}+
null            \0
newline         \n
CHARCONST       '[a-zA-Z0-9]|{null}|{newline}'


%%
 //rules section 
\n              { ++line_num; return ENDL; }

and             { return AND; }
or              { return OR; }
not             { return NOT; }

={2}            { return EQ; }
!=              { return NOTEQ; }
<=              { return LESSEQ; }
>=              { return GRTEQ; }
<               { return LESS; }
>               { return GRT; }

\+\+            { return INC; }
--              { return DEC; }

\+=             { return ADDASS; }
-=              { return SUBASS; }
\*=             { return MULTASS; }
\/=             { return DIVASS; }


\+              { yylval.sval = strdup(yytext; return PLUS; }
-               { return SUB; }
\*              { return MULT; }
\/              { return DIV; }
%               { return MOD; }
=               { return ASS; }



[(\/\/)+ .* $]	; // Do nothing for comments
[ \t]+           ; // Grab spaces and tabs and do nothing  
{digit}+        { yylval.ival = strtoll(yytext); return NUMCONST; }
{ID}            { yylval.sval = strdup(yytext); return ID; }
true            { yylval.bval = 1; return BOOLCONST; }
false           { yylval.bval = 0; return BOOLCONST; }




.               { //final rule to catch everything else: error here 
                    }

%%
 // user subroutine section 
 // No subroutine here because bison is taking care of it
