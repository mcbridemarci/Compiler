 //definitions
%{
#include <stdio.h>
#include <string.h>
#include "parser.tab.h" // this file will be auto generated by bison
#include "scanType.h"

extern int yylex();
//Count the lines
int line_num = 1;

static RType* rType;

void yyerror(const char *s);

%}

%x

letter          [a-zA-Z]
digit           [0-9]
letdig          {letter}|{digit}
ID              {letter}+{letdig}*
NUMCONST        {digit}+
null            \0
newline         \n
CHARCONST       '[a-zA-Z0-9]|{null}|{newline}'


%%
 //rules section 
\n              { ++line_num; return ENDL; }
[(\/\/)+ .* $]	; // Do nothing for comments @TODO what about new lines in comments 
[ \t\n]+           ; // Grab spaces and tabs and do nothing  

and             { return AND; }
or              { return OR; }
not             { return NOT; }

={2}            { return EQ; }
!=              { return NOTEQ; }
<=              { return LESSEQ; }
>=              { return GRTEQ; }

\+\+            { return INC; }
--              { return DEC; }

\+=             { return ADDASS; }
-=              { return SUBASS; }
\*=             { return MULTASS; }
\/=             { return DIVASS; }

bool            { return BOOL }
break           { return BREAK }
char            { return CHAR }
else            { return ELSE}
if              { return IF }
in              { return IN }
int             { return INT }
return          { return RETURN }
while           { return WHILE }

[\(\)\{\}:;=,]  { return yytext[0]; }
[\*\/\+-<>\?]   { return yytext[0]; }
[\]\[%]              { return yytext[0]; }

{digit}+        { 
                  yylval.ival = strtol(yytext); 
                  return NUMCONST; 
                }

{ID}            { yylval.sval = strdup(yytext); return ID; }
true            { yylval.bval = 1; return BOOLCONST; }
false           { yylval.bval = 0; return BOOLCONST; }

{CHARCONST}       {yylval.sval = strdup(yytext); return CHARCONST; }


.               { 
                  printf("Error(%d): Invalid or misplaced input character: "%s"\n", yytext);
                }

%%
 // user subroutine section 
 // No subroutine here because bison is taking care of it
     main( argc, argv )
         int argc;
             char **argv;
                     {
                       ++argv, --argc;  /* skip over program name */
                        if ( argc > 0 )
                            yyin = fopen( argv[0], "r" );
                        else
                            yyin = stdin;                                                         
                        yylex();
                                                                                       }

