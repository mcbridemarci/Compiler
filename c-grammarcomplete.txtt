program:
       delcarationList
       ;

declarationList:
               declarationList declaration 
               | declaration
               ;

declaration:
           varDeclaration
           | funDeclaration
           | recDeclaration
           ;

recDeclaration: RECORD ID '{' localDeclarations '}'
              ;

varDeclaration:
              typeSpecifier varDeclList ';'
              ;

scopedVarDeclaration:
                    scopedTypeSpecifier varDeclList ';'
                    ;

varDeclList:
           varDeclList ',' varDeclInitialize 
           | varDeclInitialize
           ;

varDeclInitialize:
                 varDeclId 
                 | varDeclId ':' simpleExpression
                 ;

varDeclId:
         ID 
         | ID '[' NUMCONST  ']'
         ;

scopedTypeSpecifier:
                   STATIC typeSpecifier 
                   | typeSpecifier
                   ;

typeSpecifier:
             returnTypeSpecifier 
             | RECTYPE
             ;

returnTypeSpecifier:
                   INT 
                   | BOOL 
                   | CHAR
                   ;

funDeclaration:
              typeSpecifier ID '(' params ')' statement '[' ID '(' params ')' statement
              ;

params:
      paramList
      | %empty
      ;

paramList:
         paramList ';' paramTypeList 
         | paramTypeList
         ;

paramTypeList:
             typeSpecifier paramIdList
             ;

paramIdList:
           paramIdList ',' paramId 
           | paramId
           ;

paramId:
       ID 
       | ID '[' ']'
       ;

statement:
         matched
         | unmatched
         ;

matched:
        IF matched ELSE matched
        | otherStmt
        ;
    
otherStmt:
         expressionStmt 
         | compoundStmt 
         | iterationStmt 
         | returnStmt
         | breakStmt
         ;

unmatched:
        if unmatched
        | if matched
        | if matched else unmatched
        ;

compoundStmt:
            '{' localDeclarations statementList '}'
            ;

localDeclarations:
                 localDeclarations scopedVarDeclaration 
                 | %empty
                 ;

statementList:
             statementList statement 
             | %empty
             ;

expressionStmt:
              expression ';' 
              | ';'
              ;

iterationStmt:
	WHILE '(' simpleExpression ')' statement
	;

returnStmt:
	RETURN ';'
	| RETURN expression ';'
	;

breakStmt:
	BREAK ';'


expression:
	mutable PLUS expression
	| mutable ADDASS expression
	| mutable SUBASS expression
	| mutable MULTASS expression
	| mutable DIVASS expression
	| mutable INC
	| mutable DEC
	| simpleExpression
	;

simpleExpression:
	simpleExpression OR andExpression
	| andExpression
	;

andExpression: 
	andExpression AND unaryRelExpression
	| unaryRelExpression
	;

unaryRelExpression:
	NOT unaryRelExpression
	| relExpression
	;

relExpression:
	sumExpression relop sumExpression
	| sumExpression;

relop:
    LESSEQ
	| LESS
	| GRT
	| GRTEQ
	| ASS
	| NOTEQ
	;

sumExpression:
	sumExpression sumop term
	| term
	;

sumop:
	PLUS
	| SUB
	;

term:
	term mulop unaryExpression
	| unaryExpression
	;

mulop:
	MUL
	| DIV
	| '%'
	;

unaryExpression:
	unaryop unaryExpression
	| factor
	;

unaryop:
	−
	| ∗
	| ?
	;

factor:
	immutable
	| mutable
	;

mutable:
	ID
	| mutable '[' expression ']'
	| mutable '.' ID
	| '[' expression ']'
	;

immutable:
	'(' expression ')'
	| call
	| constant
	;

call:
	ID '(' args ')'
	;

args:
	argList
	| %empty
	;

argList: 
	argList ',' expression
	| expression
	;

constant:
	NUMCONST
	| CHARCONST
	| TRUE
	| FALSE
	;
